/*  
 * puzzel_ABC.idp
 * Jelle Caerlen & Pieter-Jan Steeman
 */

/*
 * Regels: 
 *	- per rij en kolom 1 keer A, B en C
 *	- letters langs de kant geven dichtstbijzijnde letter aan
 */

vocabulary V {
    type Row isa int
    type Column isa int
    type Letter
    type meh isa int
    
    Solution(Row, Column, Letter)
    
    UpperKnown(Row, Letter)
    LowerKnown(Row, Letter)
    LeftKnown(Column, Letter)
    RightKnown(Column, Letter)
}

structure S : V {
    meh = {1 .. 4}
 	Letter = {A; B; C;}  
    Row = {1 .. 4}
    Column = {1 .. 4}
    
    UpperKnown = {
        (4, C);
    }
    
    LowerKnown = {
        (1, B); (3, A);
    }
    
    LeftKnown = {
        (2, C); (4, C)
    }
    
    RightKnown = {
        (3, A);
    }
}

theory T : V {
    // Max 1 letter per vakje
    !row, col: 1 >= #{let[Letter]: Solution(row, col, let)}.
    
    // Elke kolom bevat exaxt 1 keer A, B and C
    !col, let:#{row: Solution(row, col, let)} = 1.
    
    // Elke rij bevat exaxt 1 keer A, B and C
    !row, let:#{col: Solution(row, col, let)} = 1.
    
    // In een 4x4 moet de gegeven letter aan de rand staan of 1tje ervan verwijdert maar geen oplossing tegen de rand 
    !row, let2: UpperKnown(row, let) & col = 1 => Solution(row, col, let) | (Solution(row, col+1, let) & ~Solution(row, col, let2)).
    !row, let2: LowerKnown(row, let) & col = 4 => Solution(row, col, let) | (Solution(row, col-1, let) & ~Solution(row, col, let2)).
     
    !col, let2: LeftKnown(col, let)  & row = 1 => Solution(row, col, let) | (Solution(row+1, col, let) & ~Solution(row, col, let2)).
    !col, let2: RightKnown(col, let) & row = 4 => Solution(row, col, let) | (Solution(row-1, col, let) & ~Solution(row, col, let2)).
}

procedure main() {
    stdoptions.nbmodels = 0
    printmodels(modelexpand(T,S))
}